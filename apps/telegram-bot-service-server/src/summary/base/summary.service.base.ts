/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Summary as PrismaSummary,
  Chat as PrismaChat,
} from "@prisma/client";

export class SummaryServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.SummaryCountArgs, "select">): Promise<number> {
    return this.prisma.summary.count(args);
  }

  async summaries(args: Prisma.SummaryFindManyArgs): Promise<PrismaSummary[]> {
    return this.prisma.summary.findMany(args);
  }
  async summary(
    args: Prisma.SummaryFindUniqueArgs
  ): Promise<PrismaSummary | null> {
    return this.prisma.summary.findUnique(args);
  }
  async createSummary(args: Prisma.SummaryCreateArgs): Promise<PrismaSummary> {
    return this.prisma.summary.create(args);
  }
  async updateSummary(args: Prisma.SummaryUpdateArgs): Promise<PrismaSummary> {
    return this.prisma.summary.update(args);
  }
  async deleteSummary(args: Prisma.SummaryDeleteArgs): Promise<PrismaSummary> {
    return this.prisma.summary.delete(args);
  }

  async getChat(parentId: string): Promise<PrismaChat | null> {
    return this.prisma.summary
      .findUnique({
        where: { id: parentId },
      })
      .chat();
  }
}
